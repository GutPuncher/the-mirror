@tool
class_name GLTFVehicleBody
extends Resource


var pilot_seat_node: Node3D = null
var pilot_seat_index: int = -1


static func from_node(vehicle_node: JBody3D) -> GLTFVehicleBody:
	var ret := GLTFVehicleBody.new()
	if vehicle_node.has_meta(&"pilot_seat_node"):
		var pilot_seat_node_path: NodePath = vehicle_node.get_meta(&"pilot_seat_node")
		ret.pilot_seat_node = vehicle_node.get_node(pilot_seat_node_path)
	return ret


## We let the vehicle node be generated by OMI_physics_body,
## and then apply vehicle-specific parameters to the node here.
func apply_to_node(state: GLTFState, vehicle_node: Node):
	pilot_seat_node = state.get_scene_node(pilot_seat_index)
	if pilot_seat_node != null:
		vehicle_node.set_meta(&"pilot_seat_node", vehicle_node.get_path_to(pilot_seat_node))
		pilot_seat_node.set_meta(&"piloted_vehicle", pilot_seat_node.get_path_to(vehicle_node))


func apply_to_godot_rigid_body(state: GLTFState, vehicle_node: RigidBody3D):
	vehicle_node.center_of_mass_mode = RigidBody3D.CENTER_OF_MASS_MODE_CUSTOM
	apply_to_node(state, vehicle_node)


static func from_dictionary(dict: Dictionary) -> GLTFVehicleBody:
	var ret := GLTFVehicleBody.new()
	if dict.has("pilotSeat"):
		ret.pilot_seat_index = dict["pilotSeat"]
	return ret


func to_dictionary() -> Dictionary:
	var ret: Dictionary = {}
	if pilot_seat_index != -1:
		ret["pilotSeat"] = pilot_seat_index
	return ret
