extends GutTest


var hierarchy: SceneHierarchy
var zone_space_scene_packed_scene: PackedScene
var space_object_dictionary: Dictionary


func before_all():
	var test_constants = load("res://test/utils/test_constants.gd").new()
	space_object_dictionary = test_constants.fake_space_object_dictionary.duplicate()
	zone_space_scene_packed_scene = load("res://scenes/space_scene.tscn")
	Zone.Scene = zone_space_scene_packed_scene.instantiate() as SpaceScene
	hierarchy = GameUI.creator_ui.scene_hierarchy
	PlayerData._cached_local_user_id = &"test-user"


func after_all():
	Zone.Scene.queue_free()
	Zone.Scene = null
	PlayerData._cached_local_user_id = PlayerData.USER_ID_UNKNOWN


func after_each():
	hierarchy.clear_selected_nodes()
	for space_object in Zone.instance_manager.get_all_instances():
		Zone.instance_manager.remove_space_object(space_object)


func test_viewport_selection():
	Zone.instance_manager.create_space_object(space_object_dictionary)
	var new_space_object: SpaceObject = Zone.instance_manager.get_instance(space_object_dictionary["_id"])
	GameUI.creator_ui.select_object(new_space_object)
	var selected_nodes: Array[Node] = hierarchy.get_selected_nodes()
	var result = selected_nodes.filter(func has_instance_id(node: Node):
		return node.get_instance_id() == new_space_object.get_instance_id())
	assert_eq(result.size(), 1, "Space object was not selected or was selected more than once")

# TODO: this test was not asserting so was failing
# I have commented this out so someone can fix in the future.
#func test_hierarchy_selection():
#	Zone.instance_manager.create_space_object(space_object_dictionary)
#	var new_space_object: SpaceObject = Zone.instance_manager.get_instance(space_object_dictionary["_id"])
#	var tree_item = hierarchy._tree._tree_items[new_space_object.get_instance_id()]
#	hierarchy._tree.multi_selected.emit(tree_item, 0, true)
#	# TODO: The selection doesn't change until the next frame, to ensure the
#	# tree is updated, and to ensure we only emit at most one signal per frame.
#	# However, it seems that GUT doesn't support running asynchronous tests.
#	await get_tree().process_frame
#	var selected_nodes: Array[Node] = hierarchy.get_selected_nodes()
#	var _result = selected_nodes.filter(func has_instance_id(node: Node):
#		return node.get_instance_id() == new_space_object.get_instance_id())
#	assert_eq(_result.size(), 1, "Space object was not selected or was selected more than once")


func test_object_selection_after_creation():
	space_object_dictionary["receipt"] = { "created_by_user": "test-user", "auto_select": true }
	Zone.instance_manager.create_space_object(space_object_dictionary)
	var new_space_object: SpaceObject = Zone.instance_manager.get_instance(space_object_dictionary["_id"])
	var selected_nodes: Array[Node] = hierarchy.get_selected_nodes()
	var result = selected_nodes.filter(func has_instance_id(node: Node):
		return node.get_instance_id() == new_space_object.get_instance_id())
	assert_eq(result.size(), 1, "Space object was not selected or was selected more than once")
